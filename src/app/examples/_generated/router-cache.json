{
  "meta": {
    "kind": "caching",
    "path": "router-cache",
    "title": "Router Cache (@client)",
    "description": "\nNext.js has an in-memory client-side cache that stores the React Server Component Payload, split by individual route segments, for the duration of a user session.\nThis is called the Router Cache.\n\nThe cache is stored in the browser's temporary memory. Two factors determine how long the router cache lasts:\n\n- Session: The cache persists across navigation. However, it's cleared on page refresh.\n- Automatic Invalidation Period: The cache of an individual segment is automatically invalidated after a specific time. The duration depends on whether the route is statically or dynamically rendered:\n- Dynamically Rendered: 30 seconds\n- Statically Rendered: 5 minutes\n\nWhile a page refresh will clear all cached segments, the automatic invalidation period only affects the individual segment from the time it was last accessed or created.\n      ",
    "doc": "https://nextjs.org/docs/app/building-your-application/caching#router-cache"
  },
  "codes": {
    "[id]/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { notFound } from \"next/navigation\";\nimport { TITLES } from \"../constants\";\n\ntype Props = {\n  params: {\n    id: string;\n  };\n};\n\nexport default function Page({ params }: Props) {\n  const title = TITLES[Number(params.id)];\n\n  if (!title) {\n    return notFound();\n  }\n\n  return (\n    <Boundary label={title}>\n      <div className=\"flex flex-col gap-4\">\n        <span className=\"text-gray-400 text-sm\">{Date.now()}</span>\n        <Link href=\"/examples/router-cache\">back</Link>\n      </div>\n    </Boundary>\n  );\n}\n",
    "constants.ts": "export const TITLES = <const>[\n  \"prefetch=true\",\n  \"prefetch=false\",\n  \"prefetch=undefined\",\n];\n",
    "layout.tsx": "\"use client\";\n\nimport { Button } from \"@/app/_components/button\";\nimport { useMonitorRSCPayload } from \"@/app/_hooks/useMonitorRSCPayload\";\nimport { useRouter } from \"next/navigation\";\nimport { type PropsWithChildren, useEffect, useState } from \"react\";\nimport { TITLES } from \"./constants\";\n\nconst path = \"/examples/router-cache\";\n\nexport default function Layout({ children }: PropsWithChildren) {\n  const { logs } = useMonitorRSCPayload(path);\n  const [, setTime] = useState(0);\n  const router = useRouter();\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setTime((time) => time + 1);\n    }, 1000);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div className=\"flex justify-end\">\n        <Button onClick={() => router.refresh()}>force purge cache</Button>\n      </div>\n      <div className=\"mt-2 flex gap-2 max-h-80 overflow-x-auto\">\n        <div className=\"w-1/2 h-full\">{children}</div>\n        <ul className=\"w-1/2 overflow-y-auto divide-y divide-gray-500 text-gray-400\">\n          {logs.map(({ path, createdAt, isNew }) => (\n            <li\n              key={`${path}_${createdAt}`}\n              className={[\n                isNew\n                  ? \"animate-[router-cache-highlight_2s_ease-in-out_1]\"\n                  : \"\",\n              ].join(\" \")}\n            >\n              <p className=\"text-right\">{(Date.now() - createdAt) / 1000} s</p>\n              <p className=\"text-sm font-semibold\">\n                {TITLES[Number(path)] ?? \"/\"}\n              </p>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\nimport { TITLES } from \"./constants\";\n\nexport default function Page() {\n  return (\n    <Boundary label=\"Page\">\n      <div className=\"flex flex-col gap-4 text-sm\">\n        <p className=\"text-gray-400\">{Date.now()}</p>\n        <Link href=\"/examples/router-cache/0\" prefetch>\n          {TITLES[0]}\n        </Link>\n        <Link href=\"/examples/router-cache/1\" prefetch={false}>\n          {TITLES[1]}\n        </Link>\n        <Link href=\"/examples/router-cache/2\" prefetch={undefined}>\n          {TITLES[2]}\n        </Link>\n      </div>\n    </Boundary>\n  );\n}\n"
  }
}