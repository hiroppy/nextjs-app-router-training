{
  "meta": {
    "kind": "security",
    "path": "taint",
    "title": "Taint",
    "description": "\nA Client Component should never accept objects that carry sensitive data.\nIdeally, the data fetching functions should not expose data that the current user should not have access to. Sometimes mistakes happen during refactoring. To protect against these mistakes happening down the line we can ‚Äútaint‚Äù the user object in our data API.\n  ",
    "doc": "https://nextjs.org/docs/app/building-your-application/data-fetching/patterns#preventing-sensitive-data-from-being-exposed-to-the-client"
  },
  "codes": {
    "_components/client.tsx": "\"use client\";\n\nimport { User } from \"../api\";\n\ntype Props = Partial<User>;\n\nexport function Client({ id, name, password }: Props) {\n  return (\n    <div className=\"flex flex-col gap-2 text-gray-300\">\n      <p>id: {id}</p>\n      <p>name: {name}</p>\n      <p>password: {password}</p>\n    </div>\n  );\n}\n",
    "_components/profile.tsx": "import { getMyProfileWithTaintObjectReference } from \"../api\";\nimport { Client } from \"./client\";\n\nexport async function Profile() {\n  const data = await getMyProfileWithTaintObjectReference();\n\n  console.log(data);\n\n  return (\n    <div>\n      <Client {...data} />\n    </div>\n  );\n}\n",
    "api.ts": "import {\n  experimental_taintObjectReference,\n  experimental_taintUniqueValue,\n} from \"react\";\n\nconst user = { id: \"my-id\", name: \"hiroppy\", password: \"xxxxx\" };\n\nexport type User = typeof user;\n\nexport async function getMyProfileWithTaintObjectReference() {\n  experimental_taintObjectReference(\n    \"Do not pass the whole user object to the client\",\n    user,\n  );\n\n  return user;\n}\n\nexport async function getMyProfileWithTaintUniqueValue() {\n  experimental_taintUniqueValue(\n    \"Do not pass the whole user object to the client\",\n    user,\n    user.password,\n  );\n\n  return user;\n}\n",
    "error.tsx": "\"use client\";\n\ntype Props = {\n  error: Error & { digest?: string };\n  reset: () => void;\n};\n\nexport default function ErrorComponent({ error }: Props) {\n  return <span>{error.message}</span>;\n}\n",
    "object-reference-ng/page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Client } from \"../_components/client\";\nimport { getMyProfileWithTaintObjectReference } from \"../api\";\n\n// turn off full route cache for demo\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Page() {\n  const data = await getMyProfileWithTaintObjectReference();\n\n  return (\n    <Boundary label=\"NG\">\n      <div className=\"flex flex-col gap-8\">\n        <div className=\"flex flex-col gap-4\">\n          <p>üëé spread operator doesn't allow</p>\n          <Client {...data} />\n        </div>\n        <div className=\"flex flex-col gap-4\">\n          <p>üëé don't separate each prop when using taintObjectReference</p>\n          <Client id={data.id} name={data.name} password={data.password} />\n        </div>\n      </div>\n    </Boundary>\n  );\n}\n",
    "object-reference-ok/page.tsx": "import { Client } from \"../_components/client\";\nimport { getMyProfileWithTaintObjectReference } from \"../api\";\n\n// turn off full route cache for demo\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Page() {\n  const data = await getMyProfileWithTaintObjectReference();\n\n  return (\n    <div>\n      <p>you have to pass props as an object when using taintObjectReference</p>\n      {/* @ts-expect-error not found the data props but it doesn't matter */}\n      <Client data={data} />\n    </div>\n  );\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Link } from \"@/app/_components/link\";\n\nexport default function Page() {\n  return (\n    <Boundary label=\"Root Page\">\n      <div className=\"flex flex-col gap-4\">\n        <Link href={getUrl(\"object-reference-ok\", \"page.tsx\")}>\n          üëç taintObjectReference\n        </Link>\n        <Link href={getUrl(\"object-reference-ng\", \"page.tsx\")}>\n          üëé taintObjectReference\n        </Link>\n        <Link href={getUrl(\"unique-value-ok\", \"page.tsx\")}>\n          üëç taintUniqueValue\n        </Link>\n      </div>\n    </Boundary>\n  );\n}\n\nfunction getUrl(kind: string, filename: string) {\n  return `/examples/taint/${kind}?file-path=${kind}/${filename}`;\n}\n",
    "unique-value-ok/page.tsx": "import { Client } from \"../_components/client\";\nimport { getMyProfileWithTaintUniqueValue } from \"../api\";\n\n// turn off full route cache for demo\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Page() {\n  const data = await getMyProfileWithTaintUniqueValue();\n\n  return (\n    <>\n      <Client password={data.password} />\n      {/* below code works because password isn't passed as a prop */}\n      {/* <Client id={data.id} name={data.name} /> */}\n    </>\n  );\n}\n"
  }
}