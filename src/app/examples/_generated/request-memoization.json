{
  "meta": {
    "kind": "caching",
    "path": "request-memoization",
    "title": "Request Memoization (@server)",
    "description": "\nReact extends the fetch API to automatically memoize requests that have the same URL and options.\nThis means you can call a fetch function for the same data in multiple places in a React component tree while only executing it once.\n    ",
    "doc": "https://nextjs.org/docs/app/building-your-application/caching#request-memoization"
  },
  "codes": {
    "_components/child.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { getNow } from \"../_utils/fetcher\";\n\ntype Props = {\n  label: string;\n  qs?: string;\n};\n\nexport async function Child({ label, qs }: Props) {\n  const now = await getNow(qs);\n\n  return <Boundary label={label}>{now}</Boundary>;\n}\n",
    "_utils/fetcher.ts": "export async function getNow(qs?: string) {\n  const res = await (\n    await fetch(\n      `${process.env.NEXT_PUBLIC_SITE_URL}/examples/request-memoization/api?q=${qs}`,\n      {\n        // don't store as a cache to understand Request Memoization clarify\n        // this \"cache\" stage is Data Cache\n        cache: \"no-store\",\n      },\n    )\n  ).json();\n\n  return res.now;\n}\n",
    "api/route.ts": "import { performance } from \"node:perf_hooks\";\nimport { revalidatePath } from \"next/cache\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n  // don't determine the response data when building to understand Request Memoization clarify\n  revalidatePath(\"/examples/request-memoization\");\n\n  return NextResponse.json({\n    now: performance.now(),\n  });\n}\n",
    "layout.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { type PropsWithChildren } from \"react\";\nimport { getNow } from \"./_utils/fetcher\";\n\nexport default async function Layout({ children }: PropsWithChildren) {\n  const now = await getNow();\n\n  return (\n    <Boundary label=\"Layout\">\n      {now}\n      {children}\n    </Boundary>\n  );\n}\n",
    "page.tsx": "import { Boundary } from \"@/app/_components/boundary\";\nimport { Child } from \"./_components/child\";\nimport { getNow } from \"./_utils/fetcher\";\n\nexport default async function Page() {\n  const now = await getNow();\n\n  return (\n    <Boundary label=\"Page\">\n      {now}\n      <Child label=\"child\" />\n      <Child label=\"child with params\" qs=\"foo\" />\n    </Boundary>\n  );\n}\n"
  }
}