{
  "meta": {
    "kind": "route-handlers",
    "path": "route-handlers",
    "title": "Route Handlers",
    "description": "\nRoute Handlers allow you to create custom request handlers for a given route using the Web Request and Response APIs.\nRoute Handlers can be nested inside the app directory, similar to page.js and layout.js. But there cannot be a route.js file at the same route segment level as page.js.\n    ",
    "doc": "https://nextjs.org/docs/app/building-your-application/routing/route-handlers"
  },
  "codes": {
    "_hooks/useFetch.ts": "import { useEffect, useState } from \"react\";\n\nexport function useFetch<T = unknown>(path: string) {\n  const [data, setData] = useState<T | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        setLoading(true);\n\n        const data = await (await fetch(path)).json();\n\n        setData(data);\n      } catch (e) {\n        if (e instanceof Error) {\n          setError(e);\n        }\n      } finally {\n        setLoading(false);\n      }\n    })();\n  }, [path]);\n\n  return <const>{ data, loading, error };\n}\n",
    "api/route.ts": "import { cookies, headers } from \"next/headers\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { COOKIE_NAME } from \"../constants\";\n\nexport async function GET(req: NextRequest, res: NextResponse) {\n  const referer = headers().get(\"referer\");\n  const cookie = cookies().get(COOKIE_NAME);\n  const newCookie = cookie\n    ? `${cookie.name}=${cookie.value}; Max-Age=2;`\n    : `${COOKIE_NAME}=referer:${referer}__${Date.now()}; Max-Age=2;`;\n\n  return NextResponse.json(\n    { msg: newCookie },\n    {\n      headers: {\n        \"Set-Cookie\": newCookie,\n      },\n    },\n  );\n}\n",
    "constants.ts": "export const COOKIE_NAME = \"example-route-handlers\";\n",
    "page.tsx": "\"use client\";\n\nimport { Boundary } from \"@/app/_components/boundary\";\nimport { Loading } from \"@/app/_components/loading\";\nimport { notFound } from \"next/navigation\";\nimport { useFetch } from \"./_hooks/useFetch\";\nimport { COOKIE_NAME } from \"./constants\";\n\nexport default function Page() {\n  const path = \"/examples/route-handlers/api\";\n  const { data, loading, error } = useFetch<{ msg: string }>(path);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (!data || error) {\n    return notFound();\n  }\n\n  return (\n    <Boundary label=\"Page\">\n      <div className=\"flex flex-col gap-4\">\n        <div>\n          <p>endpoint: {path}</p>\n          <p>cookie name: {COOKIE_NAME}</p>\n        </div>\n        <p className=\"break-all text-gray-400\">{data.msg}</p>\n      </div>\n    </Boundary>\n  );\n}\n"
  }
}